{"name":"JSBarrierOperationQueue","body":"## JSBarrierOperationQueue\r\n```JSBarrierOperationQueue``` is an ```NSOperationQueue``` subclass that allows you to add operations that behave as a barrier. Basically providing the same functionality ```dispatch_barrier_async``` provides in the ```GCD``` world.\r\n\r\nQuote from ```dispatch_barrier_async``` documentation:\r\n\r\n>Calls to this function always return immediately after the block has been submitted and never wait for the block to be invoked. When the barrier block reaches the front of a private concurrent queue, it is not executed immediately. Instead, the queue waits until its currently executing blocks finish executing. At that point, the barrier block executes by itself. Any blocks submitted after the barrier block are not executed until the barrier block completes.\r\n\r\n## Usage\r\n\r\n- Clone the repository using\r\n\r\n```bash\r\n$ git clone https://github.com/JaviSoto/JSBarrierOperationQueue.git\r\n```\r\n\r\n- Add ```JSBarrierOperationQueue.{h,m}``` to your project.\r\n- Create a ```JSBarrierOperationQueue``` just like you would create an ```NSOperationQueue```.\r\n- Submit operations using ```-addOperation:```\r\n- Submit **barrier operations** using:\r\n\r\n```objc\r\n- (void)addBarrierOperation:(NSOperation *)operation;\r\n```\r\n\r\nor\r\n\r\n```objc\r\n- (void)addBarrierOperationWithBlock:(void (^)(void))block;\r\n```\r\n\r\n- This behaves like ```dispatch_barrier_async()``` because it doesn't block the calling thread. If you want the same behaviour as ```dispatch_barrier_sync```, you can just do:\r\n\r\n```objc\r\nJSBarrierOperationQueue *queue = ...\r\nNSOperation *operation = ...\r\n\r\n[queue addBarrierOperation:operation];\r\n[operation waitUntilFinished];\r\n```\r\n\r\n## Tests\r\n- You can run the tests with:\r\n\r\n```bash\r\n$ make test\r\n```\r\n\r\n## Compatibility\r\n- Supports ARC.\r\n- Compatible with iOS4.0+\r\n- Compatible with Mac OSX 10.6+\r\n\r\n## License\r\nCopyright 2012 [Javier Soto](http://twitter.com/javisoto) (ios@javisoto.es)\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\n limitations under the License. \r\n\r\nAttribution is not required, but appreciated.","tagline":"NSOperationQueue subclass that allows you to add operations that behave as a barrier. Basically providing the same functionality dispatch_barrier_async provides in the GCD world.","google":" UA-30545231-1","note":"Don't delete this file! It's used internally to help with page regeneration."}